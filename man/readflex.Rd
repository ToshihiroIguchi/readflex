% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/readflex.R
\name{readflex}
\alias{readflex}
\title{Flexible CSV reader with auto-detected encoding}
\usage{
readflex(
  file,
  ...,
  encodings = c("UTF-8", "UTF-8-BOM", "UTF-16LE", "UTF-16BE", "Shift_JIS", "CP932",
    "EUC-JP", "ISO-2022-JP", "ISO-8859-1", "Windows-1252", "latin1", "GB18030", "GB2312",
    "GBK", "Big5", "Big5-HKSCS", "EUC-KR", "ISO-2022-KR"),
  guess_n_max = 1000,
  verbose = FALSE,
  stringsAsFactors = FALSE,
  max_file_size_mb = 100
)
}
\arguments{
\item{file}{Character. Path to the CSV file to read.}

\item{...}{Additional arguments passed to `utils::read.csv()`, such as `sep`, `header`, etc.}

\item{encodings}{Character vector. Common encodings to try if auto-detection fails.}

\item{guess_n_max}{Integer. Number of lines to sample when guessing encoding. Default is 1000.}

\item{verbose}{Logical. If TRUE, prints messages about detection and trial attempts. Default FALSE.}

\item{stringsAsFactors}{Logical. Should character vectors be converted to factors? Default FALSE.}

\item{max_file_size_mb}{Numeric. Maximum file size in MB to prevent memory issues in Shiny apps. Default 100.}
}
\value{
A `data.frame` containing the imported CSV data.
}
\description{
`readflex()` attempts to read a CSV file by automatically detecting its character encoding
(using `readr::guess_encoding()` or `stringi::stri_enc_detect()`) and falls back to
a user-specified list of common encodings if detection fails.
}
\examples{
# Basic usage (auto-detect encoding)
\dontrun{
df <- readflex("data.csv")

# Specify additional read.csv options and enable verbose output
df <- readflex("data.csv", sep = ";", stringsAsFactors = FALSE, verbose = TRUE)

# For Shiny apps, set a custom file size limit
df <- readflex("data.csv", max_file_size_mb = 50)
}
}
